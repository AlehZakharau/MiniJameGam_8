//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Code/Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Actions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Actions"",
    ""maps"": [
        {
            ""name"": ""Payer"",
            ""id"": ""5425afb7-9e44-473a-85a0-cbf74ec1d661"",
            ""actions"": [
                {
                    ""name"": ""Moving"",
                    ""type"": ""Value"",
                    ""id"": ""25a172ba-7340-43c4-b88a-5fb275e84b5a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""97f1c5cf-3af8-4143-b691-7d1230d3c131"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f5fbcf9a-5915-4b2c-bd2a-905c68fdd1e1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""683855e3-14b3-4dd8-822c-39ee61674d46"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Actions"",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""7ce142c4-5a0f-412d-b373-dd820dd0a0d2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Actions"",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""00569dc3-7091-4bba-88df-208eb9e77168"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Actions"",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""8e88bbc4-d24d-4e80-a198-b3ac46effc54"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""14d38a19-038c-4efe-9c98-ca6e8f114dc0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Actions"",
            ""bindingGroup"": ""Actions"",
            ""devices"": []
        }
    ]
}");
        // Payer
        m_Payer = asset.FindActionMap("Payer", throwIfNotFound: true);
        m_Payer_Moving = m_Payer.FindAction("Moving", throwIfNotFound: true);
        m_Payer_Jump = m_Payer.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Payer
    private readonly InputActionMap m_Payer;
    private IPayerActions m_PayerActionsCallbackInterface;
    private readonly InputAction m_Payer_Moving;
    private readonly InputAction m_Payer_Jump;
    public struct PayerActions
    {
        private @Actions m_Wrapper;
        public PayerActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moving => m_Wrapper.m_Payer_Moving;
        public InputAction @Jump => m_Wrapper.m_Payer_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Payer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PayerActions set) { return set.Get(); }
        public void SetCallbacks(IPayerActions instance)
        {
            if (m_Wrapper.m_PayerActionsCallbackInterface != null)
            {
                @Moving.started -= m_Wrapper.m_PayerActionsCallbackInterface.OnMoving;
                @Moving.performed -= m_Wrapper.m_PayerActionsCallbackInterface.OnMoving;
                @Moving.canceled -= m_Wrapper.m_PayerActionsCallbackInterface.OnMoving;
                @Jump.started -= m_Wrapper.m_PayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PayerActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_PayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Moving.started += instance.OnMoving;
                @Moving.performed += instance.OnMoving;
                @Moving.canceled += instance.OnMoving;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public PayerActions @Payer => new PayerActions(this);
    private int m_ActionsSchemeIndex = -1;
    public InputControlScheme ActionsScheme
    {
        get
        {
            if (m_ActionsSchemeIndex == -1) m_ActionsSchemeIndex = asset.FindControlSchemeIndex("Actions");
            return asset.controlSchemes[m_ActionsSchemeIndex];
        }
    }
    public interface IPayerActions
    {
        void OnMoving(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
